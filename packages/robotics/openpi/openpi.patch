diff --git a/pyproject.toml b/pyproject.toml
index c4a06e5..e3c2b04 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -3,7 +3,7 @@ name = "openpi"
 version = "0.1.0"
 description = "Physical Intelligence open source repo"
 readme = "README.md"
-requires-python = ">=3.11"
+requires-python = ">=3.11,<3.13"
 license = { file = "LICENSE" }
 dependencies = [
     "augmax>=0.3.4",
@@ -26,7 +26,6 @@ dependencies = [
     "orbax-checkpoint==0.11.13",
     "pillow>=11.0.0",
     "sentencepiece>=0.2.0",
-    "torch==2.7.1",
     "tqdm-loggable>=0.2",
     "typing-extensions>=4.12.2",
     "tyro>=0.9.5",
@@ -35,6 +34,10 @@ dependencies = [
     "beartype==0.19.0",
     "treescope>=0.1.7",
     "transformers==4.53.2",
+    "torch==2.8.0+rocm6.4",
+    "torchvision==0.23.0+rocm6.4", 
+    "torchaudio==2.8.0+rocm6.4",
+    "pytorch-triton-rocm==3.4.0",
     "rich>=14.0.0",
     "polars>=1.30.0",
 ]
@@ -62,10 +65,19 @@ rlds = [
 [tool.uv]
 override-dependencies = ["ml-dtypes==0.4.1", "tensorstore==0.1.74"]
 
+[[tool.uv.index]]
+name = "pytorch-rocm"
+url = "https://download.pytorch.org/whl/rocm6.4"
+explicit = true
+
 [tool.uv.sources]
 openpi-client = { workspace = true }
 lerobot = { git = "https://github.com/huggingface/lerobot", rev = "0cf864870cf29f4738d3ade893e6fd13fbd7cdb5" }
 dlimp = { git = "https://github.com/kvablack/dlimp", rev = "ad72ce3a9b414db2185bc0b38461d4101a65477a" }
+torch = { index = "pytorch-rocm" }
+torchvision = { index = "pytorch-rocm" }
+torchaudio = { index = "pytorch-rocm" }
+pytorch-triton-rocm = { index = "pytorch-rocm" }
 
 [tool.uv.workspace]
 members = ["packages/*"]
@@ -134,4 +146,4 @@ build-backend = "hatchling.build"
 
 [tool.pytest.ini_options]
 markers = ["manual: should be run manually."]
-testpaths = ["src", "scripts", "packages"]
+testpaths = ["src", "scripts", "packages"]
\ No newline at end of file
diff --git a/scripts/serve_policy.py b/scripts/serve_policy.py
index 30f121a..f7c5175 100644
--- a/scripts/serve_policy.py
+++ b/scripts/serve_policy.py
@@ -51,6 +51,9 @@ class Args:
     # Record the policy's behavior for debugging.
     record: bool = False
 
+    # If True, only download the checkpoint without starting the server.
+    download_only: bool = False
+
     # Specifies how to load the policy. If not provided, the default policy for the environment will be used.
     policy: Checkpoint | Default = dataclasses.field(default_factory=Default)
 
@@ -97,6 +100,24 @@ def create_policy(args: Args) -> _policy.Policy:
 
 
 def main(args: Args) -> None:
+    # If download_only mode, just download the checkpoint and exit
+    if args.download_only:
+        from openpi.shared import download
+        
+        match args.policy:
+            case Checkpoint():
+                checkpoint_dir = args.policy.dir
+            case Default():
+                checkpoint = DEFAULT_CHECKPOINT.get(args.env)
+                if checkpoint is None:
+                    raise ValueError(f"No default checkpoint for environment: {args.env}")
+                checkpoint_dir = checkpoint.dir
+        
+        logging.info("Downloading checkpoint from: %s", checkpoint_dir)
+        local_path = download.maybe_download(checkpoint_dir)
+        logging.info("Checkpoint downloaded to: %s", local_path)
+        return
+    
     policy = create_policy(args)
     policy_metadata = policy.metadata
 
